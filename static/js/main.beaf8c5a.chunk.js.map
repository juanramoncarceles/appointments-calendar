{"version":3,"sources":["utils.ts","types.ts","contexts/CalendarContext.tsx","components/CalendarHeader.tsx","hooks/useStyles.ts","components/MonthHeader.tsx","components/Appointment.tsx","components/Day.tsx","components/MonthGrid.tsx","components/Calendar.tsx","components/AppointmentFormDialog.tsx","App.tsx","theme.tsx","index.tsx"],"names":["APP_LOCALE","MONTH_FORMAT","weekendNumbers","Object","freeze","dateTimeToTimeString","dateTime","toLocaleString","DateTime","TIME_24_SIMPLE","dateTimeToPaddedTimeString","toFormat","AppointmentData","id","title","startDate","endDate","this","startOfFirstDay","startOf","endOfLastDay","endOf","Interval","fromDateTimes","initialState","isDialogOpen","selectedDay","undefined","appointments","stagingAppointment","CalendarStateContext","createContext","CalendarDispatchContext","calendarReducer","state","action","type","payload","newState","appointmentData","existingAppointment","updatedAppointment","startDateTime","endDateTime","map","a","toString","replace","c","Number","crypto","getRandomValues","Uint8Array","newAppointment","localStorage","setItem","JSON","stringify","appointment","find","toISODate","console","error","Error","CalendarProvider","children","useReducer","dispatch","Provider","value","useCalendarState","context","useContext","useCalendarDispatch","CalendarHeader","monthAndYearString","month","fromFormat","locale","year","getDisplayMonthAndYear","Typography","component","variant","align","gutterBottom","useStyles","makeStyles","theme","createStyles","container","display","gridTemplateColumns","gridGap","spacing","mbAllButLast","marginBottom","Root","styled","Box","position","top","zIndex","color","backgroundColor","MonthHeader","weekDays","classes","p","className","weekDay","style","borderRadius","long","short","overflowX","maxWidth","Appointment","data","flexDirection","fontSize","lineHeight","alignItems","marginLeft","whiteSpace","minHeight","padding","border","outline","boxShadow","cursor","transition","transform","backgroundImage","AContainer","flexGrow","maxHeight","overflowY","Day","date","calendarDispatch","clickHandler","e","appointmentContainer","target","closest","key","tabIndex","onClick","onKeyDown","bgcolor","fromISO","hasSame","local","isWeekend","opacity","trailing","text","filter","daysInterval","contains","sort","b","toMillis","MonthGrid","dates","px","Calendar","useState","currentDate","Date","toISOString","activeMonth","config","Info","weekdaysFormat","narrow","Array","fill","_","weekDayIndex","getWeekdaysDescriptions","monthDates","monthInterval","firstWeekOffset","start","weekday","lastWeekOffset","end","calendarInterval","minus","days","plus","totalDays","count","startOffset","day","includes","getMonthCalendarGrid","AppointmentFormDialog","formHeading","setFormHeading","setTitle","titleError","setTitleError","startTime","setStartDateTime","endTime","setEndDateTime","useEffect","handleClose","Dialog","open","onClose","aria-labelledby","data-testid","DialogTitle","DialogContent","TextField","required","autoFocus","margin","label","fullWidth","helperText","onChange","titleHandler","startDateHandler","InputLabelProps","shrink","endDateHandler","DialogActions","Button","trim","zone","App","log","Container","my","textAlign","mt","Link","href","createMuiTheme","palette","primary","main","secondary","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.beaf8c5a.chunk.js","sourcesContent":["import { DateTime, Info, Interval } from \"luxon\";\n\nconst APP_LOCALE = \"es-ES\";\nconst DAYS_IN_A_WEEK = 7;\nconst MONTH_FORMAT = \"yyyy-MM\";\nconst DATE_FORMAT = \"yyyy-MM-dd\";\n\n// The index of the weekend days: Saturday: 6 and Sunday: 7\nconst weekendNumbers = Object.freeze([6, 7]);\n\n/**\n * Returns long, short, and narrow weekdays descriptions for the current `APP_LOCALE`.\n */\nexport function getWeekdaysDescriptions() {\n  const config = { locale: APP_LOCALE };\n  const long = Info.weekdaysFormat(\"long\", config);\n  const short = Info.weekdaysFormat(\"short\", config);\n  const narrow = Info.weekdaysFormat(\"narrow\", config);\n\n  return Array(DAYS_IN_A_WEEK)\n    .fill(null)\n    .map((_, weekDayIndex) => {\n      return {\n        long: long[weekDayIndex],\n        short: short[weekDayIndex],\n        narrow: narrow[weekDayIndex],\n      };\n    });\n}\n\n/**\n * Returns an array for the passed date's month with trailing dates for next/previous months.\n * The array represents a calendar that starts on Monday and ends on Sunday.\n * @param date The date in format `yyyy-MM`\n */\nexport function getMonthCalendarGrid(date: string) {\n  const month = DateTime.fromFormat(date, MONTH_FORMAT);\n\n  // Get the interval for the provided month\n  const monthInterval = Interval.fromDateTimes(\n    month.startOf(\"month\"),\n    month.endOf(\"month\")\n  );\n\n  // Get offsets for trailing months\n  const firstWeekOffset = monthInterval.start.weekday - 1;\n  const lastWeekOffset = DAYS_IN_A_WEEK - monthInterval.end.weekday;\n\n  // Get calendar with trailing intervals\n  const calendarInterval = Interval.fromDateTimes(\n    monthInterval.start.minus({\n      days: firstWeekOffset > 0 ? firstWeekOffset : 0,\n    }),\n    monthInterval.end.plus({ days: lastWeekOffset })\n  );\n\n  // Map the interval to an ordered dates array that represents a calendars month.\n  const totalDays = calendarInterval.count(\"days\");\n  const start = calendarInterval.start;\n  return Array(totalDays)\n    .fill(null)\n    .map((_, startOffset) => {\n      const date = start.plus({ days: startOffset });\n      return {\n        key: date.toFormat(DATE_FORMAT),\n        text: date.toLocaleString({ locale: APP_LOCALE, day: \"numeric\" }),\n        trailing: !month.hasSame(date, \"month\"),\n        isWeekend: weekendNumbers.includes(date.weekday),\n      };\n    });\n}\n\n/**\n * Returns a localized formatted month and year string.\n * @param month The month to get the key from.\n */\nexport function getDisplayMonthAndYear(month: string) {\n  return DateTime.fromFormat(month, MONTH_FORMAT).toLocaleString({\n    locale: APP_LOCALE,\n    year: \"numeric\",\n    month: \"long\",\n  });\n}\n\n/**\n * Returns a 24 hour string representation of a time of the provided DateTime.\n * Hour value is not padded, for example: 9:00\n */\nexport function dateTimeToTimeString(dateTime: DateTime) {\n  return dateTime.toLocaleString(DateTime.TIME_24_SIMPLE);\n}\n\n/**\n * Returns a 24 hour padded string representation of a time of the provided DateTime.\n */\nexport function dateTimeToPaddedTimeString(dateTime: DateTime) {\n  return dateTime.toFormat(\"HH:mm\");\n}\n\n/**\n * Returns a boolean indicating if the provided date time is today.\n */\nexport function isToday(dateTime: DateTime) {\n  return dateTime.hasSame(DateTime.local(), \"day\");\n}\n\n/**\n * Returns a string uuid.\n * https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\nexport function uuidv4() {\n  return ((1e7).toString() + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n    (\n      Number(c) ^\n      (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4)))\n    ).toString(16)\n  );\n}\n","import { DateTime, Interval } from \"luxon\";\n\nexport interface DayDate {\n  key: string; // TODO rename? this is the date in format yyyy-MM-dd\n  text: string; // TODO rename? this is the day number 1-31\n  trailing: boolean;\n  isWeekend: boolean;\n}\n\nexport interface WeekDay {\n  long: string;\n  short: string;\n  narrow: string;\n}\n\nexport interface CalendarContextState {\n  isDialogOpen: boolean;\n  selectedDay: string | undefined; // example: 2021-01-10\n  appointments: AppointmentData[];\n  stagingAppointment: AppointmentData | undefined; // The appointment being updated.\n}\n\nexport interface AppointmentFormData {\n  title: string;\n  startDateTime: DateTime;\n  endDateTime: DateTime;\n}\n\nexport class AppointmentData {\n  id: string;\n  title: string;\n  startDate: DateTime;\n  endDate: DateTime;\n\n  constructor(\n    id: string,\n    title: string,\n    startDate: DateTime,\n    endDate: DateTime\n  ) {\n    this.id = id;\n    this.title = title;\n    this.startDate = startDate;\n    this.endDate = endDate;\n  }\n\n  /**\n   * The interval of complete days that the appointment lasts.\n   * From the beginning of the first day until the end of the last day.\n   */\n  get daysInterval() {\n    // The start time of the first day.\n    const startOfFirstDay = this.startDate.startOf(\"day\");\n    // The end time of the last day.\n    const endOfLastDay = this.endDate.endOf(\"day\");\n    // The final interval.\n    return Interval.fromDateTimes(startOfFirstDay, endOfLastDay);\n  }\n}\n\n/**\n * Type Guard to check if the provided EventTarget is an Element.\n * https://developer.mozilla.org/en-US/docs/Web/API/Element\n */\n// export function isDOMElement(x: EventTarget): x is Element {\n//   return (x as Element).className !== undefined;\n// }\n","import { createContext, useContext, useReducer, ReactNode } from \"react\";\n\nimport { uuidv4 } from \"../utils\";\n\nimport { AppointmentData } from \"../types\";\nimport type { CalendarContextState, AppointmentFormData } from \"../types\";\n\n// All action types should be added here and TypeScript will take care of the rest.\ntype Action =\n  | { type: \"NEW_APPOINTMENT\"; payload: string }\n  | { type: \"CLOSE_DIALOG\" }\n  | { type: \"SUBMIT_APPOINTMENT\"; payload: AppointmentFormData }\n  | { type: \"EDIT_APPOINTMENT\"; payload: string };\n\ntype Dispatch = (action: Action) => void;\n\nconst initialState: CalendarContextState = {\n  isDialogOpen: false,\n  selectedDay: undefined,\n  appointments: [],\n  stagingAppointment: undefined,\n};\n\n// I split state and dispatch to avoid problems with context, especially when calling dispatch in effects.\nconst CalendarStateContext = createContext<CalendarContextState | undefined>(\n  undefined\n);\nconst CalendarDispatchContext = createContext<Dispatch | undefined>(undefined);\n\n// This is the reducer that will manage the state of the context.\nconst calendarReducer = (state: CalendarContextState, action: Action) => {\n  switch (action.type) {\n    // Opens the form dialog, sets the selected day and clears stagingAppointment.\n    case \"NEW_APPOINTMENT\":\n      return {\n        ...state,\n        isDialogOpen: true,\n        selectedDay: action.payload,\n        stagingAppointment: undefined,\n      };\n    case \"CLOSE_DIALOG\":\n      // TODO clear also the selectedDay value ?\n      return { ...state, isDialogOpen: false, stagingAppointment: undefined };\n    case \"SUBMIT_APPOINTMENT\": {\n      // The data from the appointment form.\n      const appointmentData = action.payload;\n      // If it is an edit of an existing appointment here I get the old data.\n      const existingAppointment = state.stagingAppointment;\n      // The new state will be temporarily referenced here.\n      let newState: CalendarContextState;\n      // If the appointment doesn't exist yet it is added, otherwise it is replaced.\n      if (existingAppointment) {\n        const updatedAppointment = new AppointmentData(\n          existingAppointment.id,\n          appointmentData.title,\n          appointmentData.startDateTime,\n          appointmentData.endDateTime\n        );\n        // The new state with the appointment replaced.\n        newState = {\n          ...state,\n          appointments: state.appointments.map(a =>\n            a.id === existingAppointment.id ? updatedAppointment : a\n          ),\n        };\n      } else {\n        // TODO The id for the new appointment would actually be from the database.\n        const id = uuidv4();\n        // Create a new appointment.\n        const newAppointment = new AppointmentData(\n          id,\n          action.payload.title,\n          action.payload.startDateTime,\n          action.payload.endDateTime\n        );\n        // The new state with the appointment added.\n        newState = {\n          ...state,\n          appointments: [...state.appointments, newAppointment],\n        };\n      }\n      // Save the appointments data to localStorage.\n      localStorage.setItem(\n        \"appointments\",\n        JSON.stringify(newState.appointments)\n      );\n\n      return newState;\n    }\n    case \"EDIT_APPOINTMENT\":\n      // Open the dialog and find the data of the appointment to be edited.\n      {\n        // Find the appointment data by id.\n        const appointment = state.appointments.find(\n          a => a.id === action.payload\n        );\n        // TODO If in the future an appointment could start and end in different days there\n        // wouldn't be a state.selectedDay but instead two complete dateTimes.\n        // For now I just use the startDate to get the day since both (start and end) are the same.\n        if (appointment) {\n          return {\n            ...state,\n            isDialogOpen: true,\n            stagingAppointment: appointment,\n            selectedDay: appointment.startDate.toISODate(),\n          };\n        }\n        console.error(`No appointment found with id ${action.payload}`);\n      }\n      return state;\n    default:\n      throw new Error(`Unhandled action: ${action}`);\n  }\n};\n\ninterface IProps {\n  children: ReactNode;\n}\n\n// The actual context provider. It should be placed above a consumer in the tree.\nconst CalendarProvider = ({ children }: IProps) => {\n  const [state, dispatch] = useReducer(calendarReducer, initialState);\n\n  return (\n    <CalendarStateContext.Provider value={state}>\n      <CalendarDispatchContext.Provider value={dispatch}>\n        {children}\n      </CalendarDispatchContext.Provider>\n    </CalendarStateContext.Provider>\n  );\n};\n\n// Those two custom hooks below will get the context from the nearest\n// CalendarProvider, and if there is none, they throw a helpful error message.\n\nconst useCalendarState = () => {\n  const context = useContext(CalendarStateContext);\n  if (context === undefined) {\n    throw new Error(\"useCalendarState must be used within a CalendarProvider\");\n  }\n  return context;\n};\n\nconst useCalendarDispatch = () => {\n  const context = useContext(CalendarDispatchContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useCalendarDispatch must be used within a CalendarProvider\"\n    );\n  }\n  return context;\n};\n\n// CalendarStateContext and CalendarDispatchContext are exported for testing.\nexport {\n  CalendarProvider,\n  CalendarStateContext,\n  CalendarDispatchContext,\n  useCalendarState,\n  useCalendarDispatch,\n};\n","import React from \"react\";\n\nimport { Typography } from \"@material-ui/core\";\n\nimport { getDisplayMonthAndYear } from \"../utils\";\n\ninterface IProps {\n  month: string;\n}\n\nconst CalendarHeader = ({ month }: IProps) => {\n  const monthAndYearString = getDisplayMonthAndYear(month);\n\n  return (\n    <Typography component=\"h1\" variant=\"h2\" align=\"center\" gutterBottom>\n      {monthAndYearString}\n    </Typography>\n  );\n};\n\nexport default CalendarHeader;\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      // rename to gridContainer7\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(7, minmax(0,1fr))\",\n      gridGap: theme.spacing(1),\n    },\n    mbAllButLast: {\n      \"& > *:not(:last-child)\": {\n        marginBottom: theme.spacing(0.5),\n      },\n    },\n  })\n);\n\nexport { useStyles };\n","import React from \"react\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\n\nimport type { WeekDay } from \"../types\";\nimport { useStyles } from \"../hooks/useStyles\";\n\nconst Root = styled(Box)({\n  position: \"sticky\",\n  top: 0,\n  marginBottom: 4,\n  zIndex: 20,\n  color: \"#fff\",\n  backgroundColor: \"#fff\",\n});\n\ninterface IProps {\n  weekDays: WeekDay[];\n}\n\nconst MonthHeader = ({ weekDays }: IProps) => {\n  const classes = useStyles();\n\n  return (\n    <Root p={1} className={classes.container}>\n      {weekDays.map(weekDay => (\n        <Typography\n          key={weekDay.short}\n          component=\"h4\"\n          align=\"center\"\n          style={{\n            borderRadius: 2,\n            backgroundColor: \"#7aa0a8\",\n          }}\n        >\n          {weekDay.long}\n        </Typography>\n      ))}\n    </Root>\n  );\n};\n\nexport default MonthHeader;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\n\nimport { dateTimeToTimeString } from \"../utils\";\n\nimport type { AppointmentData } from \"../types\";\n\nconst Root = styled(Box)({\n  display: \"flex\",\n  overflowX: \"hidden\",\n  maxWidth: \"170%\",\n  borderRadius: 2,\n});\n\ninterface IProps {\n  data: AppointmentData;\n}\n\nconst Appointment = ({ data }: IProps) => {\n  // TODO if the appointment takes all day because it starts the day\n  // before and ends the day after how to show? an \"all day\" string?\n\n  return (\n    <Root id={data.id} className=\"appointment-identifier\" p={0.5}>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          fontSize: \"smaller\",\n          lineHeight: 1,\n        }}\n      >\n        <span>{dateTimeToTimeString(data.startDate)}</span>\n        <span>{dateTimeToTimeString(data.endDate)}</span>\n      </div>\n      <span\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          marginLeft: 5,\n          whiteSpace: \"nowrap\",\n        }}\n      >\n        {data.title}\n      </span>\n    </Root>\n  );\n};\n\nexport default Appointment;\n","import React, { MouseEvent, KeyboardEvent } from \"react\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\nimport { DateTime } from \"luxon\";\n\nimport Appointment from \"./Appointment\";\n\nimport {\n  useCalendarDispatch,\n  useCalendarState,\n} from \"../contexts/CalendarContext\";\n\nimport type { DayDate } from \"../types\";\nimport { isToday } from \"../utils\";\nimport { useStyles } from \"../hooks/useStyles\";\n\nconst Root = styled(Box)({\n  display: \"flex\",\n  flexDirection: \"column\",\n  minHeight: 110,\n  padding: 6,\n  border: \"1px solid #88b0b8\",\n  borderRadius: 2,\n  position: \"relative\",\n  outline: \"none\",\n  boxShadow: \"2px 2px 0px #88b0b8\",\n  cursor: \"pointer\",\n  transition: \"transform 0.2s, box-shadow 0.2s\",\n\n  \"&:hover, &:focus\": {\n    transform: \"translate(-2px, -2px)\",\n    boxShadow: \"4px 4px 0px #88b0b8\",\n    zIndex: 10,\n  },\n\n  \"&:hover .appointment-identifier\": {\n    backgroundImage: \"linear-gradient(45deg, #f494a9 30%, #f6957a 90%)\",\n  },\n});\n\nconst AContainer = styled(Box)({\n  display: \"flex\",\n  flexDirection: \"column\",\n  flexGrow: 1,\n  maxHeight: 115,\n  overflowY: \"hidden\",\n  overflowX: \"hidden\",\n  borderRadius: 6,\n\n  \"&:hover\": {\n    overflowY: \"visible\",\n    overflowX: \"visible\",\n  },\n\n  \"& > div\": {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n    flexGrow: 1,\n    padding: 2,\n  },\n\n  \"& .appointment-identifier\": {\n    backgroundImage: \"linear-gradient(45deg, #ebd7db 30%, #f1d3ca 90%)\",\n  },\n\n  \"& .appointment-identifier:hover\": {\n    backgroundImage: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n  },\n});\n\ninterface IProps {\n  date: DayDate;\n}\n\nconst Day = ({ date }: IProps) => {\n  const calendarDispatch = useCalendarDispatch();\n  const { appointments } = useCalendarState();\n\n  const classes = useStyles();\n\n  /**\n   * Handles if the click occurs in the day itself or in an appointment item inside.\n   * This is to avoid individual handlers and having to use stopPropagation() in the child ones.\n   * TODO The type of the param should be `MouseEvent | KeyboardEvent` but there is a problem with\n   * the compiler and I can't cast values neither use a type guard. Cast would be: `target as Element`\n   */\n  const clickHandler = (e: any) => {\n    const target = e.target;\n    let appointmentContainer: Element;\n    if ((appointmentContainer = target.closest(\".appointment-identifier\"))) {\n      calendarDispatch({\n        type: \"EDIT_APPOINTMENT\",\n        payload: appointmentContainer.id,\n      });\n    } else {\n      calendarDispatch({ type: \"NEW_APPOINTMENT\", payload: date.key });\n    }\n  };\n\n  // TODO The day and event should be able to have focus, use tabIndex or buttons.\n  return (\n    <Root\n      tabIndex={0}\n      onClick={e => clickHandler(e)}\n      onKeyDown={e => e.key === \"Enter\" && clickHandler(e)}\n      bgcolor={\n        isToday(DateTime.fromISO(date.key))\n          ? \"#e5fbdc\"\n          : date.isWeekend\n          ? \"#f4f1ce\"\n          : \"white\"\n      }\n      style={{\n        opacity: date.trailing ? 0.4 : 1,\n      }}\n    >\n      <Typography component=\"h5\" align=\"center\" gutterBottom>\n        {date.text}\n      </Typography>\n      <AContainer>\n        <div className={classes.mbAllButLast}>\n          {appointments\n            // Keep comparison time as 00:00:00 because contains() is inclusive, and otherwise if\n            // appointments are longer than a day it could fail, because if if I set a time during\n            // the day and the appointment ends that day but at a time before, the day will be excluded.\n            // Important to add the Z at the end to compare as UTC, like the start and end dates were created.\n            .filter(a =>\n              a.daysInterval.contains(DateTime.fromISO(`${date.key}T00:00:00Z`))\n            )\n            // TODO this will not work if in the future appointments can start\n            // and end in differnt days. For that filter again to put first the\n            // ones that start in a previous day and sort the rest and concat.\n            .sort((a, b) => a.startDate.toMillis() - b.startDate.toMillis())\n            .map(a => (\n              <Appointment key={a.id} data={a} />\n            ))}\n        </div>\n      </AContainer>\n    </Root>\n  );\n};\n\nexport default Day;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\n\nimport Day from \"./Day\";\n\nimport type { DayDate } from \"../types\";\nimport { useStyles } from \"../hooks/useStyles\";\n\ninterface IProps {\n  dates: DayDate[];\n}\n\nconst MonthGrid = ({ dates }: IProps) => {\n  const classes = useStyles();\n\n  return (\n    <Box px={1} className={classes.container}>\n      {dates.map(date => (\n        <Day key={date.key} date={date} />\n      ))}\n    </Box>\n  );\n};\n\nexport default MonthGrid;\n","import React, { useState } from \"react\";\nimport { DateTime, Interval } from \"luxon\";\nimport { Typography } from \"@material-ui/core\";\n\nimport { getWeekdaysDescriptions, getMonthCalendarGrid } from \"../utils\";\n\nimport CalendarHeader from \"./CalendarHeader\";\nimport MonthHeader from \"./MonthHeader\";\nimport MonthGrid from \"./MonthGrid\";\n\nconst Calendar = () => {\n  const [activeMonth, setActiveMonth] = useState(() => {\n    const currentDate = new Date();\n    return DateTime.fromISO(currentDate.toISOString()).toFormat(\"yyyy-MM\");\n  });\n\n  const weekDays = getWeekdaysDescriptions();\n\n  const monthDates = getMonthCalendarGrid(activeMonth);\n\n  return (\n    <div>\n      <CalendarHeader month={activeMonth} />\n      <Typography align=\"center\" gutterBottom>\n        Seleccione un día para añadir una cita\n      </Typography>\n      {/* wrap the two elements below in a <CalendarView /> */}\n      <MonthHeader weekDays={weekDays} />\n      <MonthGrid dates={monthDates} />\n    </div>\n  );\n};\n\nexport default Calendar;\n","import React, { ChangeEvent, useState, useEffect } from \"react\";\nimport { DateTime } from \"luxon\";\nimport {\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\n\nimport { useCalendarState } from \"../contexts/CalendarContext\";\nimport { useCalendarDispatch } from \"../contexts/CalendarContext\";\n\nimport { dateTimeToPaddedTimeString } from \"../utils\";\n\nconst AppointmentFormDialog = () => {\n  const { isDialogOpen, selectedDay, stagingAppointment } = useCalendarState();\n  const calendarDispatch = useCalendarDispatch();\n\n  // Temporary, could be used as the default start date in the form.\n  const currentHourAndMinute = () => {\n    const now = new Date();\n    return `${now\n      .getHours()\n      .toString()\n      .padStart(2, \"0\")}:${now.getMinutes().toString().padStart(2, \"0\")}`;\n  };\n\n  // TODO useReducer here to simplify state management.\n  const [formHeading, setFormHeading] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [titleError, setTitleError] = useState(false);\n  const [startTime, setStartDateTime] = useState(\"07:00\"); // TODO default could be 00:00? Google puts the current hour but every 30 min\n  const [endTime, setEndDateTime] = useState(\"08:00\"); // TODO default should be one hour after the start date?\n\n  useEffect(() => {\n    // Only if there is a stagingAppointment we are editing.\n    if (isDialogOpen && stagingAppointment) {\n      setFormHeading(\"Editar\");\n      setTitle(stagingAppointment.title);\n      // TODO If in the form instead of a time picker a date time picker was\n      // used, the method dateTimeToTimeString() below should be replaced by\n      // another that returns a complete date string.\n      setStartDateTime(\n        dateTimeToPaddedTimeString(stagingAppointment.startDate)\n      );\n      setEndDateTime(dateTimeToPaddedTimeString(stagingAppointment.endDate));\n    } else {\n      setFormHeading(\"Añadir\");\n    }\n  }, [isDialogOpen]);\n\n  const titleHandler = (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    // TODO Validate title...\n    setTitle(e.target.value);\n  };\n\n  const startDateHandler = (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    // TODO Validate date...\n    setStartDateTime(e.target.value);\n  };\n\n  const endDateHandler = (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    // TODO Validate end date. Is it after start date?\n    setEndDateTime(e.target.value);\n  };\n\n  const handleClose = () => {\n    calendarDispatch({ type: \"CLOSE_DIALOG\" });\n    // Reset form values.\n    setTitle(\"\");\n    // TODO reset also the times to the defaults.\n  };\n\n  const handleSubmit = () => {\n    // TODO Use a library to validate the form values.\n    // For now I just check if title is now empty neither all spaces.\n    // If everything is ok I dispatch and close the dialog.\n    if (title.trim() !== \"\") {\n      // Create the start and end date time objects. Used zone UTC for simplicity.\n      // TODO if instead of time pickers a date time picker is used the context's\n      // selectedDay wouldn't be necessary.\n      const startDateTime = DateTime.fromISO(`${selectedDay}T${startTime}:00`, {\n        zone: \"utc\",\n      });\n      const endDateTime = DateTime.fromISO(`${selectedDay}T${endTime}:00`, {\n        zone: \"utc\",\n      });\n      calendarDispatch({\n        type: \"SUBMIT_APPOINTMENT\",\n        payload: { title, startDateTime, endDateTime },\n      });\n      handleClose();\n    } else {\n      setTitleError(true);\n    }\n  };\n\n  // TODO Using a form would be more accessible? and better for submit with Enter and disable autoComplete...\n  return (\n    <div>\n      <Dialog\n        open={isDialogOpen}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n        data-testid=\"appointment-dialog\"\n      >\n        <DialogTitle id=\"form-dialog-title\">{formHeading} Cita</DialogTitle>\n        <DialogContent>\n          {/* <DialogContentText>\n            Para añadir una cita rellena los siguientes campos.\n          </DialogContentText> */}\n          <TextField\n            required\n            autoFocus\n            margin=\"dense\"\n            id=\"title\"\n            label=\"Título\"\n            type=\"text\"\n            fullWidth\n            error={titleError}\n            helperText=\"Título incorrecto.\"\n            value={title}\n            onChange={e => titleHandler(e)}\n          />\n          <TextField\n            required\n            margin=\"dense\"\n            id=\"startDate\"\n            label=\"Hora de inicio\"\n            type=\"time\"\n            fullWidth\n            value={startTime}\n            onChange={e => startDateHandler(e)}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"endDate\"\n            label=\"Hora de final\"\n            type=\"time\"\n            fullWidth\n            InputLabelProps={{ shrink: true }}\n            value={endTime}\n            onChange={e => endDateHandler(e)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancelar\n          </Button>\n          <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n            Confirmar\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AppointmentFormDialog;\n","import React from \"react\";\nimport { Container, Box, Link } from \"@material-ui/core\";\n\nimport { CalendarProvider } from \"./contexts/CalendarContext\";\n\nimport Calendar from \"./components/Calendar\";\nimport AppointmentFormDialog from \"./components/AppointmentFormDialog\";\n\nconst App = () => {\n  console.log(\"👀\");\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box my={4}>\n        <CalendarProvider>\n          <Calendar />\n          <AppointmentFormDialog />\n        </CalendarProvider>\n        <Box color=\"textSecondary\" textAlign=\"center\" mt={2}>\n          <Link\n            color=\"inherit\"\n            href=\"https://github.com/juanramoncarceles/appointments-calendar\"\n            target=\"_blank\"\n          >\n            GitHub\n          </Link>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#88b0b8\",\n    },\n    secondary: {\n      main: \"#dd57c0\",\n    },\n    error: {\n      main: \"#da4848\",\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport App from \"./App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}